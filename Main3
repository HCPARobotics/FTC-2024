package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.CRServo;

@com.qualcomm.robotcore.eventloop.opmode.TeleOp(name = "TELEOP", group = "HC")
public class MainControl extends LinearOpMode {
    //Add extra devices here
    private DcMotor leftDrive;
    private DcMotor rightDrive;
    private DcMotor wrist;
    private DcMotor armMotor;
    private Servo standardServo;
    private CRServo continuousServo;

    //dont touch this 
    private boolean leftpres = false;
    private boolean rightpres = false;
    private boolean servost = false;
    private boolean continust = false;

    // EDIT THIS, encoder counts in ticks for whatever reason
    private final int WRIST_MIN_POSITION = -1000; // 360 ticks per rotation
    private final int WRIST_MAX_POSITION = 1000; //  360 ticks per rotation
    private final int ARM_ROTATION_LIMIT = 1440; // 360 ticks per rotation

    @Override
    //Config File
    public void runOpMode() throws InterruptedException {
        leftDrive = hardwareMap.get(DcMotor.class, "LD"); //Left Drive
        rightDrive = hardwareMap.get(DcMotor.class, "RD"); //Right Drive
        wrist = hardwareMap.get(DcMotor.class, "W"); //Wrist
        armMotor = hardwareMap.get(DcMotor.class, "AM"); //Arm
        standardServo = hardwareMap.get(Servo.class, "S"); //Claw Servo
        continuousServo = hardwareMap.get(CRServo.class, "CR"); //Intake Servo

        //Directions
        leftDrive.setDirection(DcMotor.Direction.FORWARD);
        rightDrive.setDirection(DcMotor.Direction.REVERSE);
        wrist.setDirection(DcMotor.Direction.FORWARD);
        armMotor.setDirection(DcMotor.Direction.FORWARD);
        standardServo.setDirection(Servo.Direction.FORWARD);
        continuousServo.setDirection(CRServo.Direction.FORWARD);

        //Encoders
        wrist.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        armMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        wrist.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        armMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        //Brake
        leftDrive.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        rightDrive.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        //Edit this if needed
        wrist.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.FLOAT);
        armMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.FLOAT);

        waitForStart();

        while (opModeIsActive()) {
            //Drive
            double drive = -gamepad1.left_stick_y;
            double turn = gamepad1.right_stick_x;

            double leftPower = drive + turn;
            double rightPower = drive - turn;

            leftDrive.setPower(leftPower);
            rightDrive.setPower(rightPower);

            //Wrist
            int wristPosition = wrist.getCurrentPosition();
            if (gamepad2.a && wristPosition < WRIST_MAX_POSITION) {
                wrist.setPower(1.0);
            } else if (gamepad2.b && wristPosition > WRIST_MIN_POSITION) {
                wrist.setPower(-1.0);
            } else {
                wrist.setPower(0.0);
            }

            //Arm
            int armPosition = armMotor.getCurrentPosition();
            if (gamepad2.x && Math.abs(armPosition) < ARM_ROTATION_LIMIT) {
                armMotor.setPower(1.0);
            } else if (gamepad2.y && Math.abs(armPosition) < ARM_ROTATION_LIMIT) {
                armMotor.setPower(-1.0);
            } else {
                armMotor.setPower(0.0);
            }

            //Claw
            if (gamepad2.left_trigger > 0.5 && !leftpres) {
                servost = !servost;
                standardServo.setPosition(servost ? 1.0 : 0.0); // Toggles between open (1.0) and close (0.0)
            }
            leftpres = gamepad2.left_trigger > 0.5;

            //Intake - Now spins continuously and reverses on trigger press
            if (gamepad2.right_trigger > 0.5 && !rightpres) {
                continust = !continust; // Toggle intake direction when top trigger is pressed
            }
            rightpres = gamepad2.right_trigger > 0.5;
            continuousServo.setPower(continust ? 1.0 : -1.0);  // Continuous spinning, reverses direction when toggled
        }
    }
}
